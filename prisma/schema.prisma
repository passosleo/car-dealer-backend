// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                     String                       @id @default(uuid()) @map("user_id")
  firstName                  String                       @map("first_name")
  lastName                   String                       @map("last_name")
  email                      String                       @unique
  password                   String
  passwordChangedAt          DateTime?                    @map("password_changed_at") @db.Timestamptz()
  createdAt                  DateTime                     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                  DateTime                     @updatedAt() @map("updated_at") @db.Timestamptz()
  active                     Boolean                      @default(true)
  profileId                  String                       @map("profile_id")
  profile                    Profile                      @relation(fields: [profileId], references: [profileId], onDelete: Restrict)
  userPasswordRecoverAttempt UserPasswordRecoverAttempt[]

  @@map("tb_users")
}

model UserPasswordRecoverAttempt {
  attemptId     String    @id @default(uuid()) @map("attempt_id")
  userId        String    @unique @map("user_id")
  user          User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  attemptCount  Int       @default(1) @map("attempt_count")
  lastAttemptAt DateTime  @map("last_attempt_at") @db.Timestamptz()
  blockedUntil  DateTime? @map("blocked_until") @db.Timestamptz()
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime  @updatedAt() @map("updated_at") @db.Timestamptz()

  @@map("tb_users_password_recover_attempts")
}

model Role {
  roleId       String         @id @default(uuid()) @map("role_id")
  name         String         @unique
  label        String
  description  String?
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime       @updatedAt() @map("updated_at") @db.Timestamptz()
  profileRoles ProfileRoles[]

  @@map("tb_roles")
}

model Profile {
  profileId    String         @id @default(uuid()) @map("profile_id")
  name         String         @unique
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime       @updatedAt() @map("updated_at") @db.Timestamptz()
  profileRoles ProfileRoles[]
  user         User[]

  @@map("tb_profiles")
}

model ProfileRoles {
  profileRoleId String   @id @default(uuid()) @map("profile_role_id")
  profileId     String   @map("profile_id")
  profile       Profile  @relation(fields: [profileId], references: [profileId], onDelete: Cascade)
  roleId        String   @map("role_id")
  role          Role     @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_profiles_roles")
}

model Brand {
  brandId   String    @id @default(uuid()) @map("brand_id")
  name      String    @unique
  imageUrl  String    @map("image_url")
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt() @map("updated_at") @db.Timestamptz()
  vehicle   Vehicle[]

  @@map("tb_brands")
}

model Category {
  categoryId String    @id @default(uuid()) @map("category_id")
  name       String    @unique
  imageUrl   String    @map("image_url")
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt() @map("updated_at") @db.Timestamptz()
  vehicle    Vehicle[]

  @@map("tb_categories")
}

model Seller {
  sellerId      String   @id @default(uuid()) @map("seller_id")
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  email         String?
  phone         String?
  imageUrl      String?  @map("image_url")
  customMessage String?  @map("custom_message")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime @updatedAt() @map("updated_at") @db.Timestamptz()

  @@map("tb_sellers")
}

model Banner {
  bannerId        String    @id @default(uuid()) @map("banner_id")
  title           String
  imageDesktopUrl String    @map("image_desktop_url")
  imageMobileUrl  String    @map("image_mobile_url")
  startAt         DateTime? @map("start_at") @db.Timestamptz()
  endAt           DateTime? @map("end_at") @db.Timestamptz()
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime  @updatedAt() @map("updated_at") @db.Timestamptz()

  @@map("tb_banners")
}

model Vehicle {
  vehicleId       String           @id @default(uuid()) @map("vehicle_id")
  model           String
  year            Int
  plate           String           @unique
  description     String?
  price           Decimal          @db.Decimal(10, 2)
  mileage         Int?
  color           String?
  transmission    String?
  fuelType        String?          @map("fuel_type")
  doors           Int?
  seats           Int?
  horsepower      Int?
  torque          Decimal?         @db.Decimal(5, 2)
  driveTrain      String?          @map("drive_train")
  brandId         String           @map("brand_id")
  brand           Brand            @relation(fields: [brandId], references: [brandId], onDelete: Cascade)
  categoryId      String           @map("category_id")
  category        Category         @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime         @updatedAt() @map("updated_at") @db.Timestamptz()
  vehicleImages   VehicleImage[]
  vehicleFeatures VehicleFeature[]

  @@map("tb_vehicles")
}

model VehicleImage {
  vehicleImageId String   @id @default(uuid()) @map("vehicle_image_id")
  vehicleId      String   @map("vehicle_id")
  vehicle        Vehicle  @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)
  imageUrl       String   @map("image_url")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("tb_vehicles_images")
}

model VehicleFeature {
  vehicleFeatureId String   @id @default(uuid()) @map("vehicle_feature_id")
  vehicleId        String   @map("vehicle_id")
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)
  feature          String
  active           Boolean  @default(true)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt        DateTime @updatedAt() @map("updated_at") @db.Timestamptz()

  @@map("tb_vehicles_features")
}
